// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package managercenter

import (
	"bytes"
	"fmt"
	//"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type ManagerCenterService interface {
	// Parameters:
	//  - CallTime
	//  - FunCode
	//  - ParamMap
	FunCallManager(callTime int64, funCode string, paramMap map[string]string) (r []*Manager, err error)
	// Parameters:
	//  - CallTime
	//  - FunCode
	//  - ParamMap
	FunCallManagerInfo(callTime int64, funCode string, paramMap map[string]string) (r []*ManagerInfo, err error)
	// Parameters:
	//  - CallTime
	//  - FunCode
	//  - ParamMap
	FunCallDepartment(callTime int64, funCode string, paramMap map[string]string) (r []*Department, err error)
}

type ManagerCenterServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewManagerCenterServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ManagerCenterServiceClient {
	return &ManagerCenterServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewManagerCenterServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ManagerCenterServiceClient {
	return &ManagerCenterServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - CallTime
//  - FunCode
//  - ParamMap
func (p *ManagerCenterServiceClient) FunCallManager(callTime int64, funCode string, paramMap map[string]string) (r []*Manager, err error) {
	if err = p.sendFunCallManager(callTime, funCode, paramMap); err != nil {
		return
	}
	return p.recvFunCallManager()
}

func (p *ManagerCenterServiceClient) sendFunCallManager(callTime int64, funCode string, paramMap map[string]string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("funCallManager", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FunCallManagerArgs{
		CallTime: callTime,
		FunCode:  funCode,
		ParamMap: paramMap,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ManagerCenterServiceClient) recvFunCallManager() (value []*Manager, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "funCallManager failed: out of sequence response")
		return
	}
	result := FunCallManagerResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - CallTime
//  - FunCode
//  - ParamMap
func (p *ManagerCenterServiceClient) FunCallManagerInfo(callTime int64, funCode string, paramMap map[string]string) (r []*ManagerInfo, err error) {
	if err = p.sendFunCallManagerInfo(callTime, funCode, paramMap); err != nil {
		return
	}
	return p.recvFunCallManagerInfo()
}

func (p *ManagerCenterServiceClient) sendFunCallManagerInfo(callTime int64, funCode string, paramMap map[string]string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("funCallManagerInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FunCallManagerInfoArgs{
		CallTime: callTime,
		FunCode:  funCode,
		ParamMap: paramMap,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ManagerCenterServiceClient) recvFunCallManagerInfo() (value []*ManagerInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "funCallManagerInfo failed: out of sequence response")
		return
	}
	result := FunCallManagerInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - CallTime
//  - FunCode
//  - ParamMap
func (p *ManagerCenterServiceClient) FunCallDepartment(callTime int64, funCode string, paramMap map[string]string) (r []*Department, err error) {
	if err = p.sendFunCallDepartment(callTime, funCode, paramMap); err != nil {
		return
	}
	return p.recvFunCallDepartment()
}

func (p *ManagerCenterServiceClient) sendFunCallDepartment(callTime int64, funCode string, paramMap map[string]string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("funCallDepartment", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FunCallDepartmentArgs{
		CallTime: callTime,
		FunCode:  funCode,
		ParamMap: paramMap,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ManagerCenterServiceClient) recvFunCallDepartment() (value []*Department, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "funCallDepartment failed: out of sequence response")
		return
	}
	result := FunCallDepartmentResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type ManagerCenterServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ManagerCenterService
}

func (p *ManagerCenterServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ManagerCenterServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ManagerCenterServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewManagerCenterServiceProcessor(handler ManagerCenterService) *ManagerCenterServiceProcessor {

	self6 := &ManagerCenterServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self6.processorMap["funCallManager"] = &managerCenterServiceProcessorFunCallManager{handler: handler}
	self6.processorMap["funCallManagerInfo"] = &managerCenterServiceProcessorFunCallManagerInfo{handler: handler}
	self6.processorMap["funCallDepartment"] = &managerCenterServiceProcessorFunCallDepartment{handler: handler}
	return self6
}

func (p *ManagerCenterServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x7 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x7.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x7

}

type managerCenterServiceProcessorFunCallManager struct {
	handler ManagerCenterService
}

func (p *managerCenterServiceProcessorFunCallManager) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FunCallManagerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("funCallManager", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FunCallManagerResult{}
	var retval []*Manager
	var err2 error
	if retval, err2 = p.handler.FunCallManager(args.CallTime, args.FunCode, args.ParamMap); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing funCallManager: "+err2.Error())
		oprot.WriteMessageBegin("funCallManager", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("funCallManager", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerCenterServiceProcessorFunCallManagerInfo struct {
	handler ManagerCenterService
}

func (p *managerCenterServiceProcessorFunCallManagerInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FunCallManagerInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("funCallManagerInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FunCallManagerInfoResult{}
	var retval []*ManagerInfo
	var err2 error
	if retval, err2 = p.handler.FunCallManagerInfo(args.CallTime, args.FunCode, args.ParamMap); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing funCallManagerInfo: "+err2.Error())
		oprot.WriteMessageBegin("funCallManagerInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("funCallManagerInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerCenterServiceProcessorFunCallDepartment struct {
	handler ManagerCenterService
}

func (p *managerCenterServiceProcessorFunCallDepartment) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FunCallDepartmentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("funCallDepartment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FunCallDepartmentResult{}
	var retval []*Department
	var err2 error
	if retval, err2 = p.handler.FunCallDepartment(args.CallTime, args.FunCode, args.ParamMap); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing funCallDepartment: "+err2.Error())
		oprot.WriteMessageBegin("funCallDepartment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("funCallDepartment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type FunCallManagerArgs struct {
	CallTime int64             `thrift:"callTime,1" json:"callTime"`
	FunCode  string            `thrift:"funCode,2" json:"funCode"`
	ParamMap map[string]string `thrift:"paramMap,3" json:"paramMap"`
}

func NewFunCallManagerArgs() *FunCallManagerArgs {
	return &FunCallManagerArgs{}
}

func (p *FunCallManagerArgs) GetCallTime() int64 {
	return p.CallTime
}

func (p *FunCallManagerArgs) GetFunCode() string {
	return p.FunCode
}

func (p *FunCallManagerArgs) GetParamMap() map[string]string {
	return p.ParamMap
}
func (p *FunCallManagerArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FunCallManagerArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.CallTime = v
	}
	return nil
}

func (p *FunCallManagerArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.FunCode = v
	}
	return nil
}

func (p *FunCallManagerArgs) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.ParamMap = tMap
	for i := 0; i < size; i++ {
		var _key8 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key8 = v
		}
		var _val9 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val9 = v
		}
		p.ParamMap[_key8] = _val9
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *FunCallManagerArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("funCallManager_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FunCallManagerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("callTime", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:callTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CallTime)); err != nil {
		return fmt.Errorf("%T.callTime (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:callTime: %s", p, err)
	}
	return err
}

func (p *FunCallManagerArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("funCode", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:funCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FunCode)); err != nil {
		return fmt.Errorf("%T.funCode (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:funCode: %s", p, err)
	}
	return err
}

func (p *FunCallManagerArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paramMap", thrift.MAP, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:paramMap: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ParamMap)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.ParamMap {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:paramMap: %s", p, err)
	}
	return err
}

func (p *FunCallManagerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FunCallManagerArgs(%+v)", *p)
}

type FunCallManagerResult struct {
	Success []*Manager `thrift:"success,0" json:"success"`
}

func NewFunCallManagerResult() *FunCallManagerResult {
	return &FunCallManagerResult{}
}

var FunCallManagerResult_Success_DEFAULT []*Manager

func (p *FunCallManagerResult) GetSuccess() []*Manager {
	return p.Success
}
func (p *FunCallManagerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FunCallManagerResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FunCallManagerResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Manager, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem10 := &Manager{}
		if err := _elem10.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem10, err)
		}
		p.Success = append(p.Success, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *FunCallManagerResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("funCallManager_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FunCallManagerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FunCallManagerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FunCallManagerResult(%+v)", *p)
}

type FunCallManagerInfoArgs struct {
	CallTime int64             `thrift:"callTime,1" json:"callTime"`
	FunCode  string            `thrift:"funCode,2" json:"funCode"`
	ParamMap map[string]string `thrift:"paramMap,3" json:"paramMap"`
}

func NewFunCallManagerInfoArgs() *FunCallManagerInfoArgs {
	return &FunCallManagerInfoArgs{}
}

func (p *FunCallManagerInfoArgs) GetCallTime() int64 {
	return p.CallTime
}

func (p *FunCallManagerInfoArgs) GetFunCode() string {
	return p.FunCode
}

func (p *FunCallManagerInfoArgs) GetParamMap() map[string]string {
	return p.ParamMap
}
func (p *FunCallManagerInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FunCallManagerInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.CallTime = v
	}
	return nil
}

func (p *FunCallManagerInfoArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.FunCode = v
	}
	return nil
}

func (p *FunCallManagerInfoArgs) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.ParamMap = tMap
	for i := 0; i < size; i++ {
		var _key11 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key11 = v
		}
		var _val12 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val12 = v
		}
		p.ParamMap[_key11] = _val12
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *FunCallManagerInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("funCallManagerInfo_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FunCallManagerInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("callTime", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:callTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CallTime)); err != nil {
		return fmt.Errorf("%T.callTime (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:callTime: %s", p, err)
	}
	return err
}

func (p *FunCallManagerInfoArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("funCode", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:funCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FunCode)); err != nil {
		return fmt.Errorf("%T.funCode (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:funCode: %s", p, err)
	}
	return err
}

func (p *FunCallManagerInfoArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paramMap", thrift.MAP, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:paramMap: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ParamMap)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.ParamMap {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:paramMap: %s", p, err)
	}
	return err
}

func (p *FunCallManagerInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FunCallManagerInfoArgs(%+v)", *p)
}

type FunCallManagerInfoResult struct {
	Success []*ManagerInfo `thrift:"success,0" json:"success"`
}

func NewFunCallManagerInfoResult() *FunCallManagerInfoResult {
	return &FunCallManagerInfoResult{}
}

var FunCallManagerInfoResult_Success_DEFAULT []*ManagerInfo

func (p *FunCallManagerInfoResult) GetSuccess() []*ManagerInfo {
	return p.Success
}
func (p *FunCallManagerInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FunCallManagerInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FunCallManagerInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*ManagerInfo, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem13 := &ManagerInfo{}
		if err := _elem13.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem13, err)
		}
		p.Success = append(p.Success, _elem13)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *FunCallManagerInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("funCallManagerInfo_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FunCallManagerInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FunCallManagerInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FunCallManagerInfoResult(%+v)", *p)
}

type FunCallDepartmentArgs struct {
	CallTime int64             `thrift:"callTime,1" json:"callTime"`
	FunCode  string            `thrift:"funCode,2" json:"funCode"`
	ParamMap map[string]string `thrift:"paramMap,3" json:"paramMap"`
}

func NewFunCallDepartmentArgs() *FunCallDepartmentArgs {
	return &FunCallDepartmentArgs{}
}

func (p *FunCallDepartmentArgs) GetCallTime() int64 {
	return p.CallTime
}

func (p *FunCallDepartmentArgs) GetFunCode() string {
	return p.FunCode
}

func (p *FunCallDepartmentArgs) GetParamMap() map[string]string {
	return p.ParamMap
}
func (p *FunCallDepartmentArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FunCallDepartmentArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.CallTime = v
	}
	return nil
}

func (p *FunCallDepartmentArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.FunCode = v
	}
	return nil
}

func (p *FunCallDepartmentArgs) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.ParamMap = tMap
	for i := 0; i < size; i++ {
		var _key14 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key14 = v
		}
		var _val15 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val15 = v
		}
		p.ParamMap[_key14] = _val15
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *FunCallDepartmentArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("funCallDepartment_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FunCallDepartmentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("callTime", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:callTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CallTime)); err != nil {
		return fmt.Errorf("%T.callTime (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:callTime: %s", p, err)
	}
	return err
}

func (p *FunCallDepartmentArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("funCode", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:funCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FunCode)); err != nil {
		return fmt.Errorf("%T.funCode (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:funCode: %s", p, err)
	}
	return err
}

func (p *FunCallDepartmentArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paramMap", thrift.MAP, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:paramMap: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ParamMap)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.ParamMap {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:paramMap: %s", p, err)
	}
	return err
}

func (p *FunCallDepartmentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FunCallDepartmentArgs(%+v)", *p)
}

type FunCallDepartmentResult struct {
	Success []*Department `thrift:"success,0" json:"success"`
}

func NewFunCallDepartmentResult() *FunCallDepartmentResult {
	return &FunCallDepartmentResult{}
}

var FunCallDepartmentResult_Success_DEFAULT []*Department

func (p *FunCallDepartmentResult) GetSuccess() []*Department {
	return p.Success
}
func (p *FunCallDepartmentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FunCallDepartmentResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FunCallDepartmentResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Department, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem16 := &Department{}
		if err := _elem16.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem16, err)
		}
		p.Success = append(p.Success, _elem16)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *FunCallDepartmentResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("funCallDepartment_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FunCallDepartmentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FunCallDepartmentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FunCallDepartmentResult(%+v)", *p)
}
